// src/app/tools/horizon-scanner/page.tsx
'use client';

import { useState } from 'react';
import Link from 'next/link';

export default function HorizonScannerDemo() {
  const [activeTab, setActiveTab] = useState('overview');

  const tabs = [
    { id: 'overview', label: 'Overview' },
    { id: 'chat', label: 'Ask GPT-4o' },
    { id: 'review', label: 'Analyst Review' },
    { id: 'weak-signals', label: 'Weak Signals' },
  ];

  const screenshotPaths: Record<string, string> = {
    overview: '/tools/horizon-scanner/screenshots/overview.png',
    'weak-signals': '/tools/horizon-scanner/screenshots/weak-signals.png',
    chat: '/tools/horizon-scanner/screenshots/chat.png',
    review: '/tools/horizon-scanner/screenshots/review.png',
  };

  return (
    <div className="max-w-7xl mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold text-gray-900 mb-2">Horizon Scanning and Weak Signal Detection Tool</h1>
      <p className="text-lg text-gray-600 mb-6">
        An AI-powered toolkit that periodically (or on-demand) collects political, economic, social, technological, environmental, and legal (PESTEL) factors from open sources, 
        enriches it with natural language processing, stores semantic embeddings in FAISS, 
        and answers questions through a Retrieval-Augmented Generation (RAG) agent (CLI and Streamlit UI).
      </p>
      <p className="text-sm text-gray-700 italic font-bold mb-2">
        ⚠️ This is a static demo. The full version runs locally with FAISS, NLP enrichment, and GPT-4o RAG.
        <br />
        <Link
          href="https://github.com/RomanDSFS/horizon-weak-signals"
          target="_blank"
          className="text-blue-600 hover:underline"
        >
          View full project on GitHub →
        </Link>
      </p>

      {/* Tabs */}
      <div className="border-b border-gray-200 mb-6">
        <nav className="flex space-x-8">
          {tabs.map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`py-2 px-1 font-medium text-sm whitespace-nowrap ${
                activeTab === tab.id
                  ? 'text-blue-600 border-b-2 border-blue-600'
                  : 'text-gray-500 hover:text-gray-700'
              }`}
            >
              {tab.label}
            </button>
          ))}
        </nav>
      </div>

      {/* Screenshot Viewer */}
      <div className="bg-white border border-gray-200 rounded-lg shadow-sm overflow-hidden">
        <img
          src={screenshotPaths[activeTab]}
          alt={`${tabs.find(t => t.id === activeTab)?.label} view`}
          className="w-full h-auto"
          loading="lazy"
        />
      </div>

      {/* Optional: Add captions per tab */}
      <div className="mt-2 text-sm font-semibold text-gray-600">
        {activeTab === 'overview' && (
          <>High-level KPIs, source distribution, and preview of top trend items.</>
        )}
        {activeTab === 'weak-signals' && (
          <>Explore rare policy cues flagged as potential weak signals (≤2 keyword matches).</>
        )}
        {activeTab === 'chat' && (
          <>Ask natural-language questions — in the full version, answers are generated by GPT-4o with RAG context.</>
        )}
        {activeTab === 'review' && (
          <>Human-in-the-loop moderation queue for approving/rejecting suggested items.</>
        )}
      </div>
    </div>
  );
}