// src/app/tools/horizon-scanner/page.tsx
'use client';

import { useState } from 'react';
import Link from 'next/link';
import Image from 'next/image';

export default function HorizonScannerDemo() {
  const [activeTab, setActiveTab] = useState('overview');

  const tabs = [
    { id: 'overview', label: 'Overview' },
    { id: 'chat', label: 'Ask GPT-4o' },
    { id: 'review', label: 'Analyst Review' },
    { id: 'weak-signals', label: 'Weak Signals' },
  ];

  const screenshotPaths: Record<string, string> = {
    overview: '/tools/horizon-scanner/screenshots/overview.png',
    'weak-signals': '/tools/horizon-scanner/screenshots/weak-signals.png',
    chat: '/tools/horizon-scanner/screenshots/chat.png',
    review: '/tools/horizon-scanner/screenshots/review.png',
  };

  return (
    <div className="max-w-7xl mx-auto px-4 py-4">
      {/* <h1 className="text-3xl font-bold text-gray-900 mb-2">Horizon Scanning and Weak Signal Detection Tool</h1> */}
      <p className="text-lg text-gray-100 mb-4">
        An AI-powered toolkit that periodically (or on-demand) collects political, economic, social, technological, environmental, and legal (PESTEL) factors from open sources, 
        enriches it with natural language processing, stores semantic embeddings in FAISS, 
        and answers questions through a Retrieval-Augmented Generation (RAG) agent (CLI and Streamlit UI).
      </p>
      <p className="text-sm text-gray-200 italic font-bold mb-2">
        ⚠️ This is a static demo. The full version runs locally with FAISS, NLP enrichment, and GPT-4o RAG.
        <br />
        <Link
          href="https://github.com/RomanDSFS/horizon-weak-signals"
          target="_blank"
          className="text-blue-300 hover:underline"
        >
          View full project on GitHub →
        </Link>
      </p>

            {/* Layout: left sidebar + right viewer */}
      <div className="grid gap-6 lg:gap-8 grid-cols-1 lg:[grid-template-columns:260px_minmax(0,1fr)]">
        {/* ===== Левый сайдбар ===== */}
        <aside className="space-y-4 lg:sticky lg:top-6 h-max">
          <div className="rounded-xl border border-gray-200 bg-white p-4 dark:bg-gray-800 dark:border-gray-700">
            <h4 className="font-semibold text-gray-900 dark:text-white mb-3">Views</h4>
            <div className="flex flex-col gap-2">
              {tabs.map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`w-full text-left px-3 py-2 rounded-lg text-sm font-medium ${
                    activeTab === tab.id
                      ? 'bg-blue-600 text-white'
                      : 'bg-gray-200 text-gray-800 dark:bg-gray-700 dark:text-gray-100'
                  }`}
                >
                  {tab.label}
                </button>
              ))}
            </div>
          </div>
        </aside>

        {/* ===== Правая колонка: скриншоты ===== */}
        <section className="space-y-3">
          {/* Screenshot Viewer */}
          <div className="bg-white border border-gray-200 rounded-lg shadow-sm overflow-hidden">
            <div className="relative w-full" style={{ aspectRatio: '16 / 9' }}>
              <Image
                src={screenshotPaths[activeTab]}
                alt={`${tabs.find(t => t.id === activeTab)?.label} view`}
                fill
                sizes="(max-width: 1024px) 100vw, 896px"
                className="object-contain"
                priority={activeTab === 'overview'}
                loading={activeTab === 'overview' ? 'eager' : 'lazy'}
              />
            </div>
          </div>

          {/* Captions */}
          <div className="mt-2 text-sm font-semibold text-gray-200">
            {activeTab === 'overview' && (
              <>High-level KPIs, source distribution, and preview of top trend items.</>
            )}
            {activeTab === 'weak-signals' && (
              <>Explore rare policy cues flagged as potential weak signals (≤2 keyword matches).</>
            )}
            {activeTab === 'chat' && (
              <>Ask natural-language questions — in the full version, answers are generated by GPT-4o with RAG context.</>
            )}
            {activeTab === 'review' && (
              <>Human-in-the-loop moderation queue for approving/rejecting suggested items.</>
            )}
          </div>
        </section>
      </div>
    </div>
  );
}